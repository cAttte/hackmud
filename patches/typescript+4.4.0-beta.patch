diff --git a/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts b/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts
index 0f69609..772bd80 100644
--- a/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts
+++ b/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts
@@ -133,5 +133,3 @@ interface Atomics {
 
     readonly [Symbol.toStringTag]: "Atomics";
 }
-
-declare var Atomics: Atomics;
diff --git a/node_modules/typescript/lib/lib.es5.d.ts b/node_modules/typescript/lib/lib.es5.d.ts
index a52ef45..d7487ca 100644
--- a/node_modules/typescript/lib/lib.es5.d.ts
+++ b/node_modules/typescript/lib/lib.es5.d.ts
@@ -22,8 +22,8 @@ and limitations under the License.
 /// ECMAScript APIs
 /////////////////////////////
 
-declare var NaN: number;
-declare var Infinity: number;
+declare const NaN: number;
+declare const Infinity: number;
 
 /**
  * Evaluates JavaScript code and executes it.
@@ -119,7 +119,7 @@ interface PropertyDescriptorMap {
 
 interface Object {
     /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */
-    constructor: Function;
+    constructor: ObjectConstructor;
 
     /** Returns a string representation of an object. */
     toString(): string;
@@ -147,6 +147,8 @@ interface Object {
      * @param v A property name.
      */
     propertyIsEnumerable(v: PropertyKey): boolean;
+
+    __proto__: any;
 }
 
 interface ObjectConstructor {
@@ -154,15 +156,11 @@ interface ObjectConstructor {
     (): any;
     (value: any): any;
 
+    constructor: string;
+
     /** A reference to the prototype for a class of objects. */
     readonly prototype: Object;
 
-    /**
-     * Returns the prototype of an object.
-     * @param o The object that references the prototype.
-     */
-    getPrototypeOf(o: any): any;
-
     /**
      * Gets the own property descriptor of the specified object.
      * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.
@@ -264,7 +262,7 @@ interface ObjectConstructor {
 /**
  * Provides functionality common to all JavaScript objects.
  */
-declare var Object: ObjectConstructor;
+declare const Object: ObjectConstructor;
 
 /**
  * Creates a new function.
@@ -297,10 +295,6 @@ interface Function {
 
     prototype: any;
     readonly length: number;
-
-    // Non-standard extensions
-    arguments: any;
-    caller: Function;
 }
 
 interface FunctionConstructor {
@@ -313,8 +307,6 @@ interface FunctionConstructor {
     readonly prototype: Function;
 }
 
-declare var Function: FunctionConstructor;
-
 /**
  * Extracts the type of the 'this' parameter of a function type, or 'unknown' if the function type has no 'this' parameter.
  */
@@ -388,7 +380,6 @@ interface NewableFunction extends Function {
 interface IArguments {
     [index: number]: any;
     length: number;
-    callee: Function;
 }
 
 interface String {
@@ -524,7 +515,7 @@ interface StringConstructor {
 /**
  * Allows manipulation and formatting of text strings and determination and location of substrings within strings.
  */
-declare var String: StringConstructor;
+declare const String: StringConstructor;
 
 interface Boolean {
     /** Returns the primitive value of the specified object. */
@@ -537,7 +528,7 @@ interface BooleanConstructor {
     readonly prototype: Boolean;
 }
 
-declare var Boolean: BooleanConstructor;
+declare const Boolean: BooleanConstructor;
 
 interface Number {
     /**
@@ -599,7 +590,7 @@ interface NumberConstructor {
 }
 
 /** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */
-declare var Number: NumberConstructor;
+declare const Number: NumberConstructor;
 
 interface TemplateStringsArray extends ReadonlyArray<string> {
     readonly raw: readonly string[];
@@ -723,7 +714,7 @@ interface Math {
     tan(x: number): number;
 }
 /** An intrinsic object that provides basic mathematics functionality and constants. */
-declare var Math: Math;
+declare const Math: Math;
 
 /** Enables basic storage and retrieval of dates and times. */
 interface Date {
@@ -904,7 +895,7 @@ interface DateConstructor {
     now(): number;
 }
 
-declare var Date: DateConstructor;
+declare const Date: DateConstructor;
 
 interface RegExpMatchArray extends Array<string> {
     index?: number;
@@ -967,12 +958,12 @@ interface RegExpConstructor {
     lastMatch: string;
 }
 
-declare var RegExp: RegExpConstructor;
+declare const RegExp: RegExpConstructor;
 
 interface Error {
     name: string;
     message: string;
-    stack?: string;
+    stack: string;
 }
 
 interface ErrorConstructor {
@@ -981,7 +972,7 @@ interface ErrorConstructor {
     readonly prototype: Error;
 }
 
-declare var Error: ErrorConstructor;
+declare const Error: ErrorConstructor;
 
 interface EvalError extends Error {
 }
@@ -992,7 +983,7 @@ interface EvalErrorConstructor extends ErrorConstructor {
     readonly prototype: EvalError;
 }
 
-declare var EvalError: EvalErrorConstructor;
+declare const EvalError: EvalErrorConstructor;
 
 interface RangeError extends Error {
 }
@@ -1003,7 +994,7 @@ interface RangeErrorConstructor extends ErrorConstructor {
     readonly prototype: RangeError;
 }
 
-declare var RangeError: RangeErrorConstructor;
+declare const RangeError: RangeErrorConstructor;
 
 interface ReferenceError extends Error {
 }
@@ -1014,7 +1005,7 @@ interface ReferenceErrorConstructor extends ErrorConstructor {
     readonly prototype: ReferenceError;
 }
 
-declare var ReferenceError: ReferenceErrorConstructor;
+declare const ReferenceError: ReferenceErrorConstructor;
 
 interface SyntaxError extends Error {
 }
@@ -1025,7 +1016,7 @@ interface SyntaxErrorConstructor extends ErrorConstructor {
     readonly prototype: SyntaxError;
 }
 
-declare var SyntaxError: SyntaxErrorConstructor;
+declare const SyntaxError: SyntaxErrorConstructor;
 
 interface TypeError extends Error {
 }
@@ -1036,7 +1027,7 @@ interface TypeErrorConstructor extends ErrorConstructor {
     readonly prototype: TypeError;
 }
 
-declare var TypeError: TypeErrorConstructor;
+declare const TypeError: TypeErrorConstructor;
 
 interface URIError extends Error {
 }
@@ -1047,36 +1038,70 @@ interface URIErrorConstructor extends ErrorConstructor {
     readonly prototype: URIError;
 }
 
-declare var URIError: URIErrorConstructor;
+declare const URIError: URIErrorConstructor;
 
 interface JSON {
+    /**
+     * JSON.parse and JSON.stringify, have been modified so that they will never throw an error.
+     * The standard JSON additional arguments are each shifted to the right by 1.
+     *
+     * Converts a JavaScript Object Notation (JSON) string into an object.
+     * @param text A valid JSON string.
+     * @param error An empty object, which will be given an error message in the event of error.
+     * @param reviver A function that transforms the results. This function is called for each member of the object.
+     * If a member contains nested objects, the nested objects are transformed before the parent object is.
+     */
+    parse(text: string, error?: {}, reviver?: (this: any, key: string, value: any) => any): any;
+    /**
+     * JSON.parse and JSON.stringify, have been modified so that they will never throw an error.
+     * The standard JSON additional arguments are each shifted to the right by 1.
+     *
+     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
+     * @param value A JavaScript value, usually an object or array, to be converted.
+     * @param error An empty object, which will be given an error message in the event of error.
+     * @param replacer A function that transforms the results.
+     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
+     */
+    stringify(value: any, error?: {}, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
+    /**
+     * JSON.parse and JSON.stringify, have been modified so that they will never throw an error.
+     * The standard JSON additional arguments are each shifted to the right by 1.
+     *
+     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
+     * @param value A JavaScript value, usually an object or array, to be converted.
+     * @param error An empty object, which will be given an error message in the event of error.
+     * @param replacer An array of strings and numbers that acts as an approved list for selecting the object properties that will be stringified.
+     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
+     */
+    stringify(value: any, error?: {}, replacer?: (number | string)[] | null, space?: string | number): string;
+
     /**
      * Converts a JavaScript Object Notation (JSON) string into an object.
      * @param text A valid JSON string.
      * @param reviver A function that transforms the results. This function is called for each member of the object.
      * If a member contains nested objects, the nested objects are transformed before the parent object is.
      */
-    parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
+    oparse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
     /**
      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
      * @param value A JavaScript value, usually an object or array, to be converted.
      * @param replacer A function that transforms the results.
      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
      */
-    stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
+    ostringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
     /**
      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
      * @param value A JavaScript value, usually an object or array, to be converted.
      * @param replacer An array of strings and numbers that acts as an approved list for selecting the object properties that will be stringified.
      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
      */
-    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;
+    ostringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;
 }
 
 /**
  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.
  */
-declare var JSON: JSON;
+declare const JSON: JSON;
 
 
 /////////////////////////////
@@ -1412,7 +1437,7 @@ interface ArrayConstructor {
     readonly prototype: any[];
 }
 
-declare var Array: ArrayConstructor;
+declare const Array: ArrayConstructor;
 
 interface TypedPropertyDescriptor<T> {
     enumerable?: boolean;
@@ -1596,7 +1621,7 @@ interface ArrayBufferConstructor {
     new(byteLength: number): ArrayBuffer;
     isView(arg: any): arg is ArrayBufferView;
 }
-declare var ArrayBuffer: ArrayBufferConstructor;
+declare const ArrayBuffer: ArrayBufferConstructor;
 
 interface ArrayBufferView {
     /**
@@ -1747,7 +1772,7 @@ interface DataViewConstructor {
     readonly prototype: DataView;
     new(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;
 }
-declare var DataView: DataViewConstructor;
+declare const DataView: DataViewConstructor;
 
 /**
  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested
@@ -2029,7 +2054,7 @@ interface Int8ArrayConstructor {
 
 
 }
-declare var Int8Array: Int8ArrayConstructor;
+declare const Int8Array: Int8ArrayConstructor;
 
 /**
  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the
@@ -2311,7 +2336,7 @@ interface Uint8ArrayConstructor {
     from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
 
 }
-declare var Uint8Array: Uint8ArrayConstructor;
+declare const Uint8Array: Uint8ArrayConstructor;
 
 /**
  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.
@@ -2592,7 +2617,7 @@ interface Uint8ClampedArrayConstructor {
      */
     from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray;
 }
-declare var Uint8ClampedArray: Uint8ClampedArrayConstructor;
+declare const Uint8ClampedArray: Uint8ClampedArrayConstructor;
 
 /**
  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the
@@ -2874,7 +2899,7 @@ interface Int16ArrayConstructor {
 
 
 }
-declare var Int16Array: Int16ArrayConstructor;
+declare const Int16Array: Int16ArrayConstructor;
 
 /**
  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the
@@ -3157,7 +3182,7 @@ interface Uint16ArrayConstructor {
 
 
 }
-declare var Uint16Array: Uint16ArrayConstructor;
+declare const Uint16Array: Uint16ArrayConstructor;
 /**
  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
@@ -3438,7 +3463,7 @@ interface Int32ArrayConstructor {
     from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array;
 
 }
-declare var Int32Array: Int32ArrayConstructor;
+declare const Int32Array: Int32ArrayConstructor;
 
 /**
  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the
@@ -3719,7 +3744,7 @@ interface Uint32ArrayConstructor {
     from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array;
 
 }
-declare var Uint32Array: Uint32ArrayConstructor;
+declare const Uint32Array: Uint32ArrayConstructor;
 
 /**
  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number
@@ -4002,7 +4027,7 @@ interface Float32ArrayConstructor {
 
 
 }
-declare var Float32Array: Float32ArrayConstructor;
+declare const Float32Array: Float32ArrayConstructor;
 
 /**
  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested
@@ -4275,7 +4300,7 @@ interface Float64ArrayConstructor {
     from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array;
 
 }
-declare var Float64Array: Float64ArrayConstructor;
+declare const Float64Array: Float64ArrayConstructor;
 
 /////////////////////////////
 /// ECMAScript Internationalization API
@@ -4305,11 +4330,6 @@ declare namespace Intl {
         compare(x: string, y: string): number;
         resolvedOptions(): ResolvedCollatorOptions;
     }
-    var Collator: {
-        new(locales?: string | string[], options?: CollatorOptions): Collator;
-        (locales?: string | string[], options?: CollatorOptions): Collator;
-        supportedLocalesOf(locales: string | string[], options?: CollatorOptions): string[];
-    };
 
     interface NumberFormatOptions {
         localeMatcher?: string;
@@ -4343,11 +4363,6 @@ declare namespace Intl {
         format(value: number): string;
         resolvedOptions(): ResolvedNumberFormatOptions;
     }
-    var NumberFormat: {
-        new(locales?: string | string[], options?: NumberFormatOptions): NumberFormat;
-        (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;
-        supportedLocalesOf(locales: string | string[], options?: NumberFormatOptions): string[];
-    };
 
     interface DateTimeFormatOptions {
         localeMatcher?: "best fit" | "lookup";
@@ -4386,11 +4401,6 @@ declare namespace Intl {
         format(date?: Date | number): string;
         resolvedOptions(): ResolvedDateTimeFormatOptions;
     }
-    var DateTimeFormat: {
-        new(locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;
-        (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;
-        supportedLocalesOf(locales: string | string[], options?: DateTimeFormatOptions): string[];
-    };
 }
 
 interface String {
